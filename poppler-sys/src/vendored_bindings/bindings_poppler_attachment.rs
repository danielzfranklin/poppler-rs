/* automatically generated by rust-bindgen */

use crate::dep_types::*;
use crate::poppler::*;

pub type PopplerAttachmentSaveFunc = ::std::option::Option<
    unsafe extern "C" fn(
        buf: *const gchar,
        count: gsize,
        data: gpointer,
        error: *mut *mut GError,
    ) -> gboolean,
>;
#[repr(C)]
pub struct _PopplerAttachment {
    pub parent: GObject,
    pub name: *mut gchar,
    pub description: *mut gchar,
    pub size: gsize,
    pub mtime: GTime,
    pub ctime: GTime,
    pub checksum: *mut GString,
}
#[test]
fn bindgen_test_layout__PopplerAttachment() {
    assert_eq!(
        ::std::mem::size_of::<_PopplerAttachment>(),
        64usize,
        concat!("Size of: ", stringify!(_PopplerAttachment))
    );
    assert_eq!(
        ::std::mem::align_of::<_PopplerAttachment>(),
        8usize,
        concat!("Alignment of ", stringify!(_PopplerAttachment))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PopplerAttachment>())).parent as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PopplerAttachment),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PopplerAttachment>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_PopplerAttachment),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PopplerAttachment>())).description as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_PopplerAttachment),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PopplerAttachment>())).size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_PopplerAttachment),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PopplerAttachment>())).mtime as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_PopplerAttachment),
            "::",
            stringify!(mtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PopplerAttachment>())).ctime as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_PopplerAttachment),
            "::",
            stringify!(ctime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PopplerAttachment>())).checksum as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_PopplerAttachment),
            "::",
            stringify!(checksum)
        )
    );
}
#[repr(C)]
pub struct _PopplerAttachmentClass {
    pub parent_class: GObjectClass,
}
#[test]
fn bindgen_test_layout__PopplerAttachmentClass() {
    assert_eq!(
        ::std::mem::size_of::<_PopplerAttachmentClass>(),
        136usize,
        concat!("Size of: ", stringify!(_PopplerAttachmentClass))
    );
    assert_eq!(
        ::std::mem::align_of::<_PopplerAttachmentClass>(),
        8usize,
        concat!("Alignment of ", stringify!(_PopplerAttachmentClass))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_PopplerAttachmentClass>())).parent_class as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PopplerAttachmentClass),
            "::",
            stringify!(parent_class)
        )
    );
}
pub type PopplerAttachmentClass = _PopplerAttachmentClass;
extern "C" {
    pub fn poppler_attachment_get_type() -> GType;
}
extern "C" {
    pub fn poppler_attachment_save(
        attachment: *mut PopplerAttachment,
        filename: *const ::std::os::raw::c_char,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn poppler_attachment_save_to_callback(
        attachment: *mut PopplerAttachment,
        save_func: PopplerAttachmentSaveFunc,
        user_data: gpointer,
        error: *mut *mut GError,
    ) -> gboolean;
}
