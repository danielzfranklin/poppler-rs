/* automatically generated by rust-bindgen */

use crate::dep_types::*;
use crate::poppler::*;

#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PopplerFormFieldType {
    POPPLER_FORM_FIELD_UNKNOWN = 0,
    POPPLER_FORM_FIELD_BUTTON = 1,
    POPPLER_FORM_FIELD_TEXT = 2,
    POPPLER_FORM_FIELD_CHOICE = 3,
    POPPLER_FORM_FIELD_SIGNATURE = 4,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PopplerFormButtonType {
    POPPLER_FORM_BUTTON_PUSH = 0,
    POPPLER_FORM_BUTTON_CHECK = 1,
    POPPLER_FORM_BUTTON_RADIO = 2,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PopplerFormTextType {
    POPPLER_FORM_TEXT_NORMAL = 0,
    POPPLER_FORM_TEXT_MULTILINE = 1,
    POPPLER_FORM_TEXT_FILE_SELECT = 2,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PopplerFormChoiceType {
    POPPLER_FORM_CHOICE_COMBO = 0,
    POPPLER_FORM_CHOICE_LIST = 1,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PopplerAdditionalActionType {
    POPPLER_ADDITIONAL_ACTION_FIELD_MODIFIED = 0,
    POPPLER_ADDITIONAL_ACTION_FORMAT_FIELD = 1,
    POPPLER_ADDITIONAL_ACTION_VALIDATE_FIELD = 2,
    POPPLER_ADDITIONAL_ACTION_CALCULATE_FIELD = 3,
}
extern "C" {
    pub fn poppler_form_field_get_type() -> GType;
}
extern "C" {
    pub fn poppler_form_field_get_field_type(field: *mut PopplerFormField) -> PopplerFormFieldType;
}
extern "C" {
    pub fn poppler_form_field_get_id(field: *mut PopplerFormField) -> gint;
}
extern "C" {
    pub fn poppler_form_field_get_font_size(field: *mut PopplerFormField) -> gdouble;
}
extern "C" {
    pub fn poppler_form_field_is_read_only(field: *mut PopplerFormField) -> gboolean;
}
extern "C" {
    pub fn poppler_form_field_get_partial_name(field: *mut PopplerFormField) -> *mut gchar;
}
extern "C" {
    pub fn poppler_form_field_get_mapping_name(field: *mut PopplerFormField) -> *mut gchar;
}
extern "C" {
    pub fn poppler_form_field_get_name(field: *mut PopplerFormField) -> *mut gchar;
}
extern "C" {
    pub fn poppler_form_field_get_action(field: *mut PopplerFormField) -> *mut PopplerAction;
}
extern "C" {
    pub fn poppler_form_field_get_additional_action(
        field: *mut PopplerFormField,
        type_: PopplerAdditionalActionType,
    ) -> *mut PopplerAction;
}
extern "C" {
    pub fn poppler_form_field_button_get_button_type(
        field: *mut PopplerFormField,
    ) -> PopplerFormButtonType;
}
extern "C" {
    pub fn poppler_form_field_button_get_state(field: *mut PopplerFormField) -> gboolean;
}
extern "C" {
    pub fn poppler_form_field_button_set_state(field: *mut PopplerFormField, state: gboolean);
}
extern "C" {
    pub fn poppler_form_field_text_get_text_type(
        field: *mut PopplerFormField,
    ) -> PopplerFormTextType;
}
extern "C" {
    pub fn poppler_form_field_text_get_text(field: *mut PopplerFormField) -> *mut gchar;
}
extern "C" {
    pub fn poppler_form_field_text_set_text(field: *mut PopplerFormField, text: *const gchar);
}
extern "C" {
    pub fn poppler_form_field_text_get_max_len(field: *mut PopplerFormField) -> gint;
}
extern "C" {
    pub fn poppler_form_field_text_do_spell_check(field: *mut PopplerFormField) -> gboolean;
}
extern "C" {
    pub fn poppler_form_field_text_do_scroll(field: *mut PopplerFormField) -> gboolean;
}
extern "C" {
    pub fn poppler_form_field_text_is_rich_text(field: *mut PopplerFormField) -> gboolean;
}
extern "C" {
    pub fn poppler_form_field_text_is_password(field: *mut PopplerFormField) -> gboolean;
}
extern "C" {
    pub fn poppler_form_field_choice_get_choice_type(
        field: *mut PopplerFormField,
    ) -> PopplerFormChoiceType;
}
extern "C" {
    pub fn poppler_form_field_choice_is_editable(field: *mut PopplerFormField) -> gboolean;
}
extern "C" {
    pub fn poppler_form_field_choice_can_select_multiple(field: *mut PopplerFormField) -> gboolean;
}
extern "C" {
    pub fn poppler_form_field_choice_do_spell_check(field: *mut PopplerFormField) -> gboolean;
}
extern "C" {
    pub fn poppler_form_field_choice_commit_on_change(field: *mut PopplerFormField) -> gboolean;
}
extern "C" {
    pub fn poppler_form_field_choice_get_n_items(field: *mut PopplerFormField) -> gint;
}
extern "C" {
    pub fn poppler_form_field_choice_get_item(
        field: *mut PopplerFormField,
        index: gint,
    ) -> *mut gchar;
}
extern "C" {
    pub fn poppler_form_field_choice_is_item_selected(
        field: *mut PopplerFormField,
        index: gint,
    ) -> gboolean;
}
extern "C" {
    pub fn poppler_form_field_choice_select_item(field: *mut PopplerFormField, index: gint);
}
extern "C" {
    pub fn poppler_form_field_choice_unselect_all(field: *mut PopplerFormField);
}
extern "C" {
    pub fn poppler_form_field_choice_toggle_item(field: *mut PopplerFormField, index: gint);
}
extern "C" {
    pub fn poppler_form_field_choice_set_text(field: *mut PopplerFormField, text: *const gchar);
}
extern "C" {
    pub fn poppler_form_field_choice_get_text(field: *mut PopplerFormField) -> *mut gchar;
}
